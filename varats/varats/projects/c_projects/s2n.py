"""Project file for s2n."""
import typing as tp

import benchbuild as bb
from benchbuild.project import Project
from benchbuild.utils.cmd import make, source
from benchbuild.utils.compiler import cc
from benchbuild.utils.download import with_git
from benchbuild.utils.run import run
from benchbuild.utils.settings import get_number_of_jobs
from plumbum import local

from varats.data.provider.cve.cve_provider import CVEProviderHook
from varats.paper.paper_config import project_filter_generator
from varats.settings import bb_cfg
from varats.utils.project_util import (
    wrap_paths_to_binaries,
    ProjectBinaryWrapper,
)


class S2n(Project, CVEProviderHook):  # type: ignore
    """An implementation of the TLS/SSL protocols (fetched by Git)"""

    NAME = 's2n'
    GROUP = 'c_projects'
    DOMAIN = 'security'
    VERSION = 'HEAD'

    #SRC_FILE = NAME + "-{0}".format(VERSION)
    SOURCE = bb.source.Git(
        "https://github.com/awslabs/s2n.git",
        refspec="HEAD",
        version_filter=project_filter_generator("s2n")
    )

    @property
    def binaries(self) -> tp.List[ProjectBinaryWrapper]:
        """Return a list of binaries generated by the project."""
        return wrap_paths_to_binaries(["s2n"])

    def run_tests(self, runner: run) -> None:
        pass

    def compile(self) -> None:
        # self.download()
        path = local.path(self.source_of(self.primary_source))

        clang = cc(self)
        with local.cwd(path):
            # TODO: find installed OpenSSL version and store in env variable S2N_LIBCRYPTO
            with local.env(BUILD_S2N=True, LATEST_CLANG=True, S2N_LIBCRYPTO="openssl-1.1.1"):
                # run(source["codebuild/bin/s2n_setup_env.sh"])
                bb.watch(source)("codebuild/bin/s2n_setup_env.sh")
                # run(local["codebuild/bin/s2n_install_test_dependencies.sh"])
                bb.watch(
                    local["codebuild/bin/s2n_install_test_dependencies.sh"])()
                # run(local["codebuild/bin/s2n_codebuild.sh"])
                bb.watch(local["codebuild/bin/s2n_codebuild.sh"])()

    @classmethod
    def get_cve_product_info(cls) -> tp.List[tp.Tuple[str, str]]:
        return [("awslabs", "s2n")]
