"""Project file for wazuh."""
import typing as tp
import benchbuild as bb
from benchbuild.project import Project
from benchbuild.utils.cmd import make
from benchbuild.utils.compiler import cc
from benchbuild.utils.download import with_git
from benchbuild.utils.run import run
from benchbuild.utils.settings import get_number_of_jobs
from plumbum import local

from varats.data.provider.cve.cve_provider import CVEProviderHook
from varats.paper.paper_config import project_filter_generator
from varats.settings import bb_cfg
from varats.utils.project_util import (
    wrap_paths_to_binaries,
    ProjectBinaryWrapper,
)


class Wazuh(Project, CVEProviderHook):  # type: ignore
    """Wazuh - The Open Source Security Platform (fetched by Git)"""

    NAME = 'wazuh'
    GROUP = 'c_projects'
    DOMAIN = 'security'
    VERSION = 'HEAD'

    #SRC_FILE = NAME + "-{0}".format(VERSION)
    SOURCE = bb.source.Git(
        "https://github.com/wazuh/wazuh.git",
        refspec="HEAD",
        version_filter=project_filter_generator("wazuh")
    )

    @property
    def binaries(self) -> tp.List[ProjectBinaryWrapper]:
        """Return a list of binaries generated by the project."""
        # is it wazuh or /var/ossec?
        return wrap_paths_to_binaries(["wazuh"])

    def run_tests(self, runner: run) -> None:
        pass

    def compile(self) -> None:
        # self.download()
        path = local.path(self.source_of(self.primary_source))

        clang = bb.compiler.cc(self)
        with local.cwd(path):
            with local.env(CC=str(clang)):
                # run(local["./install.sh"])
                bb.watch(local["./install.sh"])()

    @classmethod
    def get_cve_product_info(cls) -> tp.List[tp.Tuple[str, str]]:
        return [("wazuh", "wazuh")]
