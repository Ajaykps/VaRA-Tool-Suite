"""Project file for SoftEtherVPN."""
import typing as tp

import benchbuild as bb
from benchbuild.project import Project
from benchbuild.utils.cmd import make, source
from benchbuild.utils.compiler import cc
from benchbuild.utils.download import with_git
from benchbuild.utils.settings import get_number_of_jobs
from plumbum import local

from varats.provider.cve.cve_provider import CVEProviderHook
from varats.paper_mgmt.paper_config import project_filter_generator

from varats.project.project_util import (
    wrap_paths_to_binaries,
    ProjectBinaryWrapper,
)


class SoftEtherVPN(Project, CVEProviderHook):  # type: ignore
    """Cross-platform multi-protocol VPN software (fetched by Git)"""

    NAME = 'SoftEtherVPN'
    GROUP = 'c_projects'
    DOMAIN = 'VPN'
    VERSION = 'HEAD'

    #SRC_FILE = NAME + "-{0}".format(VERSION)
    SOURCE = bb.source.Git(
        remote="https://github.com/SoftEtherVPN/SoftEtherVPN_Stable.git",
        refspec="HEAD",
        shallow=False,
        version_filter=project_filter_generator("SoftEtherVPN"),
        local="SoftherVPN"
    )

    @property
    def binaries(self) -> tp.List[ProjectBinaryWrapper]:
        """Return a list of binaries generated by the project."""
        return wrap_paths_to_binaries(["tmp/vpnserver"])

    def run_tests(self) -> None:
        pass

    def compile(self) -> None:
        # self.download()
        path = local.path(self.source_of(self.primary_source))
        # TODO: install dependencies:
        # sudo apt -y install cmake gcc g++ libncurses5-dev libreadline-dev libssl-dev make zlib1g-dev
        clang = bb.compiler.cc(self)
        with local.cwd(path):
            with local.env(CC=str(clang)):
                #run(git["submodule", "init"])
                bb.watch(git)("submodule", "init")
                #run(git["submodule", "update"])
                bb.watch(git)("submodule", "update")
                # run(local["./configure"])
                bb.watch(local["./configure"])()
                #run(make["-C", "tmp", "-j", get_number_of_jobs(bb_cfg())])
                bb.watch(make)("-C", "tmp", "-j", get_number_of_jobs(bb_cfg()))

    @classmethod
    def get_cve_product_info(cls) -> tp.List[tp.Tuple[str, str]]:
        return [("SoftEtherVPN", "SoftEtherVPN")]
